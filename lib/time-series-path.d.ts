import { InterpolationMethod } from './interpolation-method.js';
import { TimeEntry, TimeEntryArray } from './time-entry.js';
import { StatusesClass, TimestampsClass, ValueArrayType, Vector } from './vector.js';
export declare class TimeSeriesPath<ValueType extends ValueArrayType> {
    interpolationMethod: InterpolationMethod;
    vector: Vector<ValueType>;
    quantityKind?: string;
    measurementUnit?: string;
    measurementUnitMultiplier?: number;
    measurementUnitOffset?: number;
    name?: string;
    description?: string;
    expression?: string;
    error?: Error;
    hint?: string;
    constructor(interpolationMethod: InterpolationMethod, quantityKind?: string, measurementUnit?: string, measurementUnitMultiplier?: number, measurementUnitOffset?: number, name?: string, description?: string, expression?: string);
    validate(): boolean;
    clone(): TimeSeriesPath<ValueType>;
    deepClone(): TimeSeriesPath<ValueType>;
    setTimeVector(timestamps: TimestampsClass, values: ValueType, statuses?: StatusesClass): TimeSeriesPath<ValueType>;
    setTimeEntries(timeEntries: TimeEntry[]): TimeSeriesPath<ValueType>;
    setTimeEntriesArray(timeEntries: TimeEntryArray[]): TimeSeriesPath<ValueType>;
    getTimeEntries(): TimeEntry[];
    mutableResample(targetTimestamps: TimestampsClass): TimeSeriesPath<ValueType>;
    resample(targetTimestamps: TimestampsClass): TimeSeriesPath<ValueType>;
    private arithmeticOperator;
    private comparisonOperator;
    private arithmeticOperatorScalar;
    private comparisonOperatorScalar;
    private arithmeticOperatorTS;
    add(arg: number | TimeSeriesPath<Float64Array>): TimeSeriesPath<Float64Array>;
    subtract(arg: number | TimeSeriesPath<Float64Array>): TimeSeriesPath<Float64Array>;
    multiply(arg: number | TimeSeriesPath<Float64Array>): TimeSeriesPath<Float64Array>;
    divide(arg: number | TimeSeriesPath<Float64Array>): TimeSeriesPath<Float64Array>;
    pow(arg: number | TimeSeriesPath<Float64Array>): TimeSeriesPath<Float64Array>;
    remainder(arg: number | TimeSeriesPath<Float64Array>): TimeSeriesPath<Float64Array>;
    lt(arg: number | TimeSeriesPath<Float64Array>): TimeSeriesPath<Uint8Array>;
    negate(): TimeSeriesPath<ValueType>;
    private static aggregate;
    static sum(timeSeriesPeriods: TimeSeriesPath<Float64Array>[]): TimeSeriesPath<Float64Array>;
    static avg(timeSeriesPeriods: TimeSeriesPath<Float64Array>[]): TimeSeriesPath<Float64Array>;
    static min(timeSeriesPeriods: TimeSeriesPath<Float64Array>[]): TimeSeriesPath<Float64Array>;
    static max(timeSeriesPeriods: TimeSeriesPath<Float64Array>[]): TimeSeriesPath<Float64Array>;
    static range(timeSeriesPeriods: TimeSeriesPath<Float64Array>[]): TimeSeriesPath<Float64Array>;
}
